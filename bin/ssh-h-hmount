#!/bin/sh -e
##:
#h: Usage: ssh-h-hmount [-W] MACHINE|localhost
#h:
#h: Install the necessary in a machine to mount "/h".
#h:
#h:   -k  Create private key for root in MACHINE and install in H machine.
#h:   -i  Install sshfs and create "/h/NOT_MOUNTED" in MACHINE.
#h:   -m  Mount "/h|X:" if not already mounted in MACHINE.
#h:   -u  Umount "/h|X:" if mounted in MACHINE.
#h:
#h: Environment variables: SSH_HMOUNT_HOST_{LAN,WAN} SSH_HMOUNT_PATH
#h: Config files: [C:]/etc/hmount
##:
#M:env: SSH_HMOUNT_HOST_WAN SSH_HMOUNT_HOST_LAN SSH_HMOUNT_PATH
##:
ssh_h_hmount() {
    local OPTIND optopt SSH mode=lan ops=
    
    ## Parse command line arguments.
    while getopts "Vkimu" optopt; do
        ops="${ops}${optopt}"
        case $optopt in
            V)  ssh_h_hmount_show_variables; return 0;;
            W)  mode=wan;;
            \?) return 1;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    
    ## Select contact.
    case "${mode}" in
        lan) SSH_HMOUNT_HOST="${SSH_HMOUNT_HOST_LAN}";;
        wan) SSH_HMOUNT_HOST="${SSH_HMOUNT_HOST_WAN}";;
    esac
    
    ## Operations.
    for SSH in "$@"; do
        if test ! -n "${SSH_HMOUNT_HOST}"; then
            echo >&2 "error: Please set SSH_HMOUNT_HOST_{LAN,WAN}."
            return 1
        fi
        if test ! -n "${SSH_HMOUNT_PATH}"; then
            echo >&2 "error: Please set SSH_HMOUNT_PATH."
            return 1
        fi
        case "${ops}" in *k*) ssh_h_hmount_exchange_keys ;; esac
        case "${ops}" in *i*) ssh_h_hmount_install_sshfs ;; esac
        case "${ops}" in *m*) ssh_h_hmount_mount         ;; esac
        case "${ops}" in *u*) ssh_h_hmount_umount        ;; esac
    done
}
ssh_h_hmount_show_variables() {
    cat <<-EOF
	SSH_HMOUNT_HOST_LAN : ${SSH_HMOUNT_HOST_LAN}
	SSH_HMOUNT_HOST_WAN : ${SSH_HMOUNT_HOST_WAN}
	SSH_HMOUNT_PATH     : ${SSH_HMOUNT_PATH}
	EOF
}
ssh_h_hmount_calc_variables() {
    case "$(uname -s)" in
        Windows_NT) SSH_HMOUNT_CONFIG="C:/etc/hmount" ;;
        *)          SSH_HMOUNT_CONFIG="/etc/hmount"   ;;
    esac
    if test -f "${SSH_HMOUNT_CONFIG}"; then
        . "${SSH_HMOUNT_CONFIG}"
    fi
}
## -------------------------------------------------------------------
ssh_h_hmount_exchange_keys() {
    ssh2 '
        ## Create keys for the admin user.
        if ${sudo} test ! -e ${admin_home}/.ssh/id_rsa.pub && \
           ${sudo} test ! -e ${admin_home}/.ssh/id_ed25519.pub; then
            echo "Generating private key for admin user ..."
            $sudo ssh-keygen
        fi
        if ${sudo} test -e ${admin_home}/.ssh/id_rsa; then
            pubkey=${admin_home}/.ssh/id_rsa.pub
            prikey=${admin_home}/.ssh/id_rsa
        elif $sudo test -e ${admin_home}/.ssh/id_ed25519; then
            pubkey=${admin_home}/.ssh/id_ed25519.pub
            prikey=${admin_home}/.ssh/id_ed25519
        else
            echo >&2 "ssh-h-hmount: error: Cannot find the private/public keys."
            exit 1
        fi
        
        ## Configure SSHFS in Windows.
        if test $(uname -s) = Windows_NT; then
            if test ! -e "C:/Program Files/SSHFS-Win"; then
                echo "ssh-h-hmount: error: Please install SSHFS."
                exit 1
            fi
            echo "Creating C:/Program Files/SSHFS-Win/etc/ssh_config ..."
            cat > "C:/Program Files/SSHFS-Win/etc/ssh_config" <<-EOF
		Host *
		         IdentityFile ${prikey}
		EOF
            echo "Changing permissions to ${prikey} ..."
            icacls ${prikey} /inheritance:r
            icacls ${prikey} /grant:r "${USERNAME}:(R,W)"
        fi
        
        ${sudo} cat ${pubkey} > .root_pubkeys
    '
    scp "${SSH}":.root_pubkeys "${SSH_HMOUNT_HOST}":.ssh/authorized_keys.tmp
    ssh "${SSH_HMOUNT_HOST}" '
        if test @"$(wc -l < ~/.ssh/authorized_keys.tmp)" = @"0"; then
            echo >&2 "error: Empty authorized_keys."
            exit 1
        fi
        echo "Appending to ~/.ssh/authorized_keys ..."
        cat ~/.ssh/authorized_keys.tmp >> ~/.ssh/authorized_keys
        rm -f ~/.ssh/authorized_keys.tmp
    '
    ssh2 -t "\${sudo} ssh -t '${SSH_HMOUNT_HOST}' true"
}
ssh_h_hmount_install_sshfs() {
    ssh2 '
        ${sudo} mkdir -p /h/NOT_MOUNTED
        case $(uname -s) in
            OpenBSD)
                ${sudo} pkg_add sshfs-fuse
                exit 0
                ;;
            Linux)
                if ${sudo} which apt-get >/dev/null 2>&1; then
                    echo "Installing sshfs ..."
                    ${sudo} apt-get -y install sshfs
                fi
                echo "Editing /etc/fuse.conf to add user_allow_other ..."
                ${sudo} sed -i "s|^\\#user_allow_other|user_allow_other|" /etc/fuse.conf
                exit 0
                ;;
        esac
    '
}
ssh_h_hmount_mount() {
    local net_use_2="$(echo "${SSH_HMOUNT_PATH}" | tr '\\' '/')"
    ssh2 "
        if test ! -e \${hdir}/NOT_MOUNTED; then
            echo Already mounted.
            exit 0
        fi

        if test \$(uname -s) = Linux; then
            opts='-o dir_cache=no -o max_conns=10 -o auto_unmount'
        else
            opts=''
        fi

        case \$(uname -s) in
            Linux|OpenBSD)
                \${sudo} sshfs \
                    '${SSH_HMOUNT_HOST}':'${SSH_HMOUNT_PATH}' \
                    \"\${hdir}\"           \
                    \${opts}               \
                    -o allow_other         \
                    -o reconnect           \
                    -o delay_connect       \
                    -o kernel_cache        \
                    -o uid=\"\$(id -u)\"   \
                    -o gid=\"\$(id -g)\"
                ;;
            Windows_NT)
                net use \"\${hdir}\" '\\\\sshfs.kr\\${SSH_HMOUNT_HOST}${net_use_2}'
                ;;
            *)
                echo >&2 'error: Unsupported platform.'
                exit 1
                ;;
        esac
            
    "
}
ssh_h_hmount_umount() {
    ssh2 "
        case \$(uname -s) in
            Linux|OpenBSD) \$sudo umount \$hdir ;;
            Windows_NT)    net use \$hdir /delete || true ;;
            *)             echo >&2 'error: Unsupported platform.'; exit 1;;
        esac
    "
}
## -------------------------------------------------------------------
ssh2() {
    local opts=""
    case "$1" in -*t*) opts="-t";; esac
    case "$1" in -*)   shift;; esac
    local cmd="
        set -e
        if test -w /etc/hosts; then
            sudo=
        elif which sudo >/dev/null 2>&1; then
            sudo=sudo
        elif which runas >/dev/null 2>&1; then
            sudo=runas
        else
            echo >&2 'error: Execute this as root.'
            exit 1
        fi
        case \$(uname -s) in
            Linux|OpenBSD) hdir='/h'  admin_home=/root              cfg='/etc/hmount'   bin='/bin' ;;
            Windows_NT)    hdir='X:'  admin_home=\"\$USERPROFILE\"  cfg='C:/etc/hmount' bin='C:/Windows/System32';;
            *)             echo >&2 'error: Unsupported platform.'; exit 1;;
        esac
        $*
    "
    case "${SSH}" in
        localhost) eval "${cmd}";;
        *)         ssh ${opts} "${SSH}" "${cmd}";;
    esac
}
## -------------------------------------------------------------------
ssh_h_hmount_calc_variables
if test @"${SCRNAME:-$(basename "$0")}" = @"ssh-h-hmount"; then
    case "${1}" in
        ''|-h|--help) sed -n 's/^ *#h: \{0,1\}//p' "$0";;
        *)            ssh_h_hmount "$@"; exit 0;;
    esac
elif test @"${SCRNAME:-$(basename "$0")}" = @"hmount2"; then
    case "${1}" in
        ''|-h|--help) echo "Usage: hmount2 { -m[W] | -u }";;
        -*)           ssh_h_hmount "$1" localhost ;;
        *)            echo >&2 "error: Invalid argument: $1"; exit 1;;
    esac
fi
